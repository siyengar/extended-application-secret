



TLS                                                           S. Iyengar
Internet-Draft                                                K. Nekritz
Intended status: Informational                                  Facebook
Expires: May 7, 2020                                   November 04, 2019


                Extended Application Secret for TLS 1.3
             draft-iyengar-tls-extended-application-secret

Abstract

   Some Transport protocols such as QUIC, use TLS 1.3 [RFC8446] as a
   service to securely negotiate parameters and exchange application
   data encryption keys.  These protocols can process data out of order
   and this can result in cases where a transport may process
   application data before processing the confirmation of the handshake
   if care is not taken to avoid this via the TLS implementation.  This
   document specifies an extension to TLS 1.3 which changes the
   derivation of the client's application encryption key in order to
   provide protection at the protocol level against out of order
   processing of client application data.

Note to Readers

   Discussion of this document takes place on the TLS Working Group
   mailing list (tls@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search?email_list=tls [1].

   Source for this draft and an issue tracker can be found at
   https://github.com/siyengar/extended-application-secret [2].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 7, 2020.




Iyengar & Nekritz          Expires May 7, 2020                  [Page 1]

Internet-Draft   Extended Application Secret for TLS 1.3   November 2019


Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Extended Application Secret . . . . . . . . . . . . . . . . .   3
     2.1.  Negotiation . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
     3.1.  Downgrade protection  . . . . . . . . . . . . . . . . . .   5
     3.2.  Pre-computation of the client's Finished  . . . . . . . .   5
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   6
     6.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   TLS 1.3 [RFC8446] provides authentication of parameter negotiation
   via confirmation messages called "Finished" messages.  These messages
   are signed transcripts of the handshake seen by both the client and
   the server to make sure that they have the same view of the
   handshake, and that no-one tampered with the handshake.  The client
   may send a Finished message in the same flight of data as 1-RTT
   application data.  A server MUST process the client's Finished
   message first before processing any of the application data.  A
   server might request client authentication, in which case the server
   would want to make sure that the client's certificate is presented,
   or that a server might want to verify that the client had never
   observed a client authentication.  Security analysis of TLS (citation
   neeeded) depends on a server processing the Finished message before
   the client's application data.





Iyengar & Nekritz          Expires May 7, 2020                  [Page 2]

Internet-Draft   Extended Application Secret for TLS 1.3   November 2019


   When TLS 1.3 is layered over TCP, this property is achieved
   trivially, since TCP provides TLS with an in-order delivery
   guarantee.  However when TLS 1.3 is layered over out-of-order
   protocols such as QUIC, a client's 1-RTT encrypted application data
   may be received by a server before the client's Finished message and
   may be incorrectly processed by the server.  The reason for this is
   the structure of the Key Schedule in TLS 1.3.  In the TLS 1.3 Key
   Schedule, the application encryption keys for the client are derived
   from the transcript up-to the server's first flight of data, which
   means that the server would have the keys available to decrypt the
   client's 1-RTT data even before receving the Finished message.  If a
   server incorrectly makes a transport protocol aware of the
   availability of the client keys before processing the Finished
   message, it might be able to decrypt and process application data,
   which might result in a vulnerability.  This is a very easy
   implementation mistake to make.  It would be better if TLS 1.3
   prevented this mistake at a protocol level and this document proposes
   an extension to the Key Schedule of TLS 1.3 to be able to avoid
   mistakes.

2.  Extended Application Secret

   Extended application secret changes the key schedule to include the
   client messages that are sent in the client's final flight to be
   included in the key derivation for the client's application traffic
   secret.

   When a client and server negotiate an extended application secret,
   they change their Key Schedule to be:

                 0
                 |
                 v
   PSK ->  HKDF-Extract = Early Secret
                 |
                 +-----> Derive-Secret(.,
                 |                     "ext binder" |
                 |                     "res binder",
                 |                     "")
                 |                     = binder_key
                 |
                 +-----> Derive-Secret(., "c e traffic",
                 |                     ClientHello)
                 |                     = client_early_traffic_secret
                 |
                 +-----> Derive-Secret(., "e exp master",
                 |                     ClientHello)
                 |                     = early_exporter_master_secret



Iyengar & Nekritz          Expires May 7, 2020                  [Page 3]

Internet-Draft   Extended Application Secret for TLS 1.3   November 2019


                 v
           Derive-Secret(., "derived", "")
                 |
                 v
(EC)DHE -> HKDF-Extract = Handshake Secret
                 |
                 +-----> Derive-Secret(., "c hs traffic",
                 |                     ClientHello...ServerHello)
                 |                     = client_handshake_traffic_secret
                 |
                 +-----> Derive-Secret(., "s hs traffic",
                 |                     ClientHello...ServerHello)
                 |                     = server_handshake_traffic_secret
                 v
           Derive-Secret(., "derived", "")
                 |
                 v
      0 -> HKDF-Extract = Master Secret
                 |
                 +-----> Derive-Secret(., "s ap traffic",
                 |                     ClientHello...server Finished)
                 |                     = server_application_traffic_secret_0
                 |
                 +-----> Derive-Secret(., "exp master",
                 |                     ClientHello...server Finished)
                 |                     = exporter_master_secret
                 |
                 +-----> Derive-Secret(., "res master",
                 |                     ClientHello...client Finished)
                 |                     = resumption_master_secret
                 |
                 +-----> Derive-Secret(., "ec ap traffic",
                                       ClientHello...client Finished)
                                       = extended_client_application_traffic_secret_0

   Where an extended_client_application_traffic_secret_0 is used as the
   client's application encryption keys instead of the the original
   client_application_traffic_secret_0.

   TBD: do we need to do anything for exporters?

   By forcing the application traffic secrets to depend on the entire
   flight of client messages, the server has to process all the client
   messages before being able to decrypt 1-RTT application data.  This
   makes it much more difficult to process data out of order
   accidentally.





Iyengar & Nekritz          Expires May 7, 2020                  [Page 4]

Internet-Draft   Extended Application Secret for TLS 1.3   November 2019


2.1.  Negotiation

   This document defines the following extension code point:

      enum {
        ...
        extended_client_application_traffic_secret(TBD),
        (65535)
      } ExtensionType;

   A client would send this extension in it's ClientHello message to
   indicate that it wished to negotiate extended application traffic
   secrets.

   If a server also supports this mechanism, they would respond with the
   same extension in the ServerHello message.

   A client and server would switch to the new key schedule once they
   knew that their peer supported it.

3.  Security Considerations

3.1.  Downgrade protection

   When introducing a mechanism to change key derivation, it's important
   to analyze whether or not there are mechanisms to downgrade the
   security of the negotiation.  This mechanism does not change the
   computation of the Finished message.  Thus it should be subject to
   the same security properties of any extension negotiation.  If an
   attacker tampers with the client's extension, the client would be
   able to detect that the server finished did not match.  Similarly, if
   an attacker were to tamper with the server's extension, the client
   finished would not match the server's expected value and the server
   Finished would not match.

3.2.  Pre-computation of the client's Finished

   In TLS 1.3, it's possible, in some cases, for the server to pre-
   compute the client's Finished message in order to send a session
   ticket before receiving the client's Finished message.  If an
   attacker tampers with the client or server extensions, the client
   would not process the ticket because the server's Finished message
   would not match.








Iyengar & Nekritz          Expires May 7, 2020                  [Page 5]

Internet-Draft   Extended Application Secret for TLS 1.3   November 2019


4.  IANA Considerations

   TBD

Acknowledgments

   TODO acknowledge.

6.  References

6.1.  Normative References

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

6.2.  URIs

   [1] https://mailarchive.ietf.org/arch/search?email_list=tls

   [2] https://github.com/siyengar/extended-application-secret

Authors' Addresses

   Subodh Iyengar
   Facebook

   Email: subodh@fb.com


   Kyle Nekritz
   Facebook

   Email: knekritz@fb.com

















Iyengar & Nekritz          Expires May 7, 2020                  [Page 6]
